// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Training.API.Database;

#nullable disable

namespace Training.API.Migrations
{
    [DbContext(typeof(TrainingContext))]
    partial class TrainingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Training.API.Trainings.ReadModels.TrainerInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("TrainerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TrainerInfos", (string)null);
                });

            modelBuilder.Entity("Training.API.Trainings.ReadModels.TrainingDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Availability")
                        .HasColumnType("integer");

                    b.Property<int?>("BreakBetweenExercisesInMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DurationTrainingInMinutes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Trainings", (string)null);
                });

            modelBuilder.Entity("Training.API.Trainings.ReadModels.TrainingExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BreakBetweenSetsInMinutes")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExternalExerciseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberRepetitions")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TrainingDetailsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TrainingDetailsId");

                    b.ToTable("TrainingExercises", (string)null);
                });

            modelBuilder.Entity("Training.API.Trainings.ReadModels.TrainingUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TrainingDetailsTrainingUser", b =>
                {
                    b.Property<Guid>("TrainingUsersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrainingsId")
                        .HasColumnType("uuid");

                    b.HasKey("TrainingUsersId", "TrainingsId");

                    b.HasIndex("TrainingsId");

                    b.ToTable("TrainingDetailsTrainingUser");
                });

            modelBuilder.Entity("Training.API.Trainings.ReadModels.TrainingDetails", b =>
                {
                    b.HasOne("Training.API.Trainings.ReadModels.TrainerInfo", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.API.Trainings.ReadModels.TrainingExercise", b =>
                {
                    b.HasOne("Training.API.Trainings.ReadModels.TrainingDetails", null)
                        .WithMany("TrainingExercises")
                        .HasForeignKey("TrainingDetailsId");
                });

            modelBuilder.Entity("TrainingDetailsTrainingUser", b =>
                {
                    b.HasOne("Training.API.Trainings.ReadModels.TrainingUser", null)
                        .WithMany()
                        .HasForeignKey("TrainingUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.API.Trainings.ReadModels.TrainingDetails", null)
                        .WithMany()
                        .HasForeignKey("TrainingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.API.Trainings.ReadModels.TrainingDetails", b =>
                {
                    b.Navigation("TrainingExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
